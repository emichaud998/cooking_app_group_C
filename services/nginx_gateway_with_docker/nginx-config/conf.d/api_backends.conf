# Currently unused, as Nginx doesn't like upstreams having a single proxy server per upstream. Or it's playing poorly with docker.
# Eventually, things should references this to provide load balancing to services that are duplicated due to high load.

# upstream ingredients {
#     server http://host.docker.internal:8090
# }

upstream recipes_upstream {
    server host.docker.internal:8090;
    server host.docker.internal:8091;
    server host.docker.internal:8092;
    server host.docker.internal:8093;
    server host.docker.internal:8094;
    server host.docker.internal:8095;
    server host.docker.internal:8096;
    server host.docker.internal:8097;
    server host.docker.internal:8098;
    server host.docker.internal:8099;
}

upstream comments_upstream {
    server host.docker.internal:9020;
    # server host.docker.internal:9021;
    # server host.docker.internal:9022;
    # server host.docker.internal:9023;
    # server host.docker.internal:9024;
    # server host.docker.internal:9025;
    # server host.docker.internal:9026;
    # server host.docker.internal:9027;
    # server host.docker.internal:9028;
    # server host.docker.internal:9029;
}

upstream shopping_upstream {
    server host.docker.internal:9040;
    server host.docker.internal:9041;
    server host.docker.internal:9042;
    server host.docker.internal:9043;
    server host.docker.internal:9044;
    server host.docker.internal:9045;
    server host.docker.internal:9046;
    server host.docker.internal:9047;
    server host.docker.internal:9048;
    server host.docker.internal:9049;
}

upstream images_upstream {
    # server https://7020556o0k.execute-api.eu-west-1.amazonaws.com;
    # This is broken atm
    server host.docker.internal:8090;
}